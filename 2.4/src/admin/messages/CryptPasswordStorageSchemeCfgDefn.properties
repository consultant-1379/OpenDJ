user-friendly-name=Crypt Password Storage Scheme
user-friendly-plural-name=Crypt Password Storage Schemes
synopsis=The Crypt Password Storage Scheme provides a mechanism for encoding user passwords like Unix crypt does. Like on most Unix systems, the password mq be encrypted using different algorithm, either UNIX crypt or md5 (bsd).
description=This implementation contains an implementation for the user password syntax, with a storage scheme name of "CRYPT". Like on most Unix, the "CRYPT" storage scheme has different algorithm, the default being the UNIX crypt. Even though the UNIX crypt is a one-way digest, it is relatively weak by today's standards. Because it supports only a 12-bit salt (meaning that there are only 4096 possible ways to encode a given password), it is also vulnerable to dictionary attacks. You should therefore use this storage scheme only in cases where an external application expects to retrieve the password and verify it outside of the directory, rather than by performing an LDAP bind.
property.crypt-password-storage-encryption-algorithm.synopsis=Specifies the algorithm to use to encrypt new passwords.
property.crypt-password-storage-encryption-algorithm.description=Select the crypt algorithm to use to encrypt new passwords. The value can either be "unix", which means the password is encrypted with the UNIX crypt algorithm, or md5 which means the password is encrypted with BSD MD5 algorithm and has a $1$ prefix.
property.crypt-password-storage-encryption-algorithm.syntax.enumeration.value.md5.synopsis=New passwords are encrypted with the BSD MD5 algorithm.
property.crypt-password-storage-encryption-algorithm.syntax.enumeration.value.unix.synopsis=New passwords are encrypted with the UNIX crypt algorithm.
property.enabled.synopsis=Indicates whether the Crypt Password Storage Scheme is enabled for use.
property.java-class.synopsis=Specifies the fully-qualified name of the Java class that provides the Crypt Password Storage Scheme implementation.
